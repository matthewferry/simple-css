@import "normalize.css";

/* Base */
@import "lib/base/variables.css";
@import "lib/base/box-model.css";
@import "lib/base/typography.css";

/*
Utilities

Utility classes are low-level structural traits. They can be applied directly
to any element; strung together; and used alongside component classes.

Utilities exist because certain CSS properties and patterns are used frequently.
For example: floats, containing floats, vertical alignment, text truncation,
basic spacing (padding and margin). Relying on utilities can help to reduce
repetition and provide consistent implementations. They also act as a
philosophical alternative to functional (i.e. non-polyfill) mixins.
*/
@import "lib/utilities/align.css";
@import "lib/utilities/display.css";
@import "lib/utilities/fade.css";
@import "lib/utilities/layout.css";
@import "lib/utilities/link.css";
@import "lib/utilities/position.css";
@import "lib/utilities/size.css";
@import "lib/utilities/text.css";

/*
Components

Components differ from utilities in that they represent an enclosed chunk of
HTML. In some ways, they are similar to a custom element, enclosing specific
semantics, styling, and behavior. Component driven development offers several
benefits when reading and writing HTML and CSS:

1. It keeps the specificity of selectors low.
2. It helps to decouple presentation semantics from document semantics.

Unlike utilities, components are much more robust. They can be extended by
adding modifiers, and may have descendent elements. A component modifier is a
class that modifies the presentation of the base component in some form. These
modifications often rely on the base presentation, so the class should be
included in the HTML in addition to the base component class.
*/
@import "lib/components/arrange.css";
@import "lib/components/button.css";
@import "lib/components/flex-embed.css";
@import "lib/components/grid.css";
@import "lib/components/tooltip.css";
@import "lib/components/truncate.css";
