/*
@define Grid
@section Components

@description
No explicit widths are set by default on grid cells. Rely on combining
`grid-cell` with a dimension utility or a component class that extends 'Grid'.

@markup
<div class="grid">
  <div class="grid_cell u-size1of3">
    Cell 1
  </div>
  <div class="grid_cell u-size1of3">
    Cell 2
  </div>
  <div class="grid_cell u-size1of3">
    Cell 3
  </div>
</div>
*/
:root {
  --grid-gutter-size: var(--spacing-unit-small);
}

.grid {
  box-sizing: border-box;
  display: flex; /* Set display to flex */
  flex-flow: row wrap;
  margin: 0; /* Reset margins on elements with defaults */
  padding: 0; /* Reset padding on elements with defaults */
}

.grid_cell {
  box-sizing: inherit;
  flex-basis: 100%; /* Set flex items to full width by default */
  min-width: 0; /* Fix issue where elements with overflow extend past the `grid-cell` container */
}

/*
@define Grid gutters
@section Components
@parent Grid

@description
Provides gutter around `grid_cell`

@markup
<div class="grid {{modifierClass}}">
  <div class="grid_cell u-size1of3">
    Cell 1
  </div>
  <div class="grid_cell u-size1of3">
    Cell 2
  </div>
  <div class="grid_cell u-size1of3">
    Cell 3
  </div>
</div>

@modifiers
.grid-withGutter
*/
.grid-withGutter {
  margin: 0 calc(-0.5 * var(--grid-gutter-size));
}

.grid-withGutter > .grid_cell {
  padding: 0 calc(0.5 * var(--grid-gutter-size));
}

/*
@define Horizontally center one cell
@section Components
@parent Grid

@description
Set a specific unit to be horizontally centered. Doesn't affect
any other units. Can still contain a child `Grid` object.

@markup
<div class="grid">
  <div class="grid_cell {{modifierClass}} u-size1of3">
    Cell 1
  </div>
</div>

@modifiers
.grid_cell-center
*/
.grid_cell-center {
  margin: 0 auto;
}

/*
@define Vertically align cells
@section Components
@parent Grid

@description
Set the vertical alignment for the grid cells. This is a helpful alternative
to `.arrange`.

@markup
<div class="grid {{modifierClass}}">
  <div class="grid_cell u-size1of3">
    Cell 1
  </div>
  <div class="grid_cell u-size1of3">
    Cell 2
  </div>
  <div class="grid_cell u-size1of3">
    Cell 3
  </div>
</div>

@modifiers
.grid-alignCenter
.grid-alignRight
.grid-alignMiddle
.grid-alignBottom
*/
.grid-alignCenter {
  justify-content: center;
}

.grid-alignRight {
  justify-content: flex-end;
}

.grid-alignMiddle {
  align-items: center;
}

.grid-alignBottom {
  align-items: flex-end;
}

/*
@define Distribute cells
@section Components
@parent Grid

@description
Horizontally and vertically distribute cells.

@markup
<div class="grid {{modifierClass}}">
  <div class="grid_cell u-size1of3">
    Cell 1
  </div>
  <div class="grid_cell u-size1of3">
    Cell 2
  </div>
  <div class="grid_cell u-size1of3">
    Cell 3
  </div>
</div>

@modifiers
.grid-fit         - Make all cells equal widths
.grid-equalHeight - Make all cells equal height
*/
.grid-fit > .grid_cell {
  flex: 1 1 0%; /* Use all shorthand values to fix IE10 bug and use 0% to avoid IE11 unitless bug */
}

.grid-equalHeight > .grid_cell {
  display: flex;
}
